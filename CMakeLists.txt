cmake_minimum_required(VERSION 3.9)
project(scope)
file(GLOB SOURCE_FILES *.cpp camera/*.cpp mmal/*.cpp)
find_package(Protobuf REQUIRED)
include_directories(. ${PROTOBUF_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR} /opt/vc/include)
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS protocol.proto)
file(GLOB WEB_INTERFACE_FILES RELATIVE ${CMAKE_SOURCE_DIR} web_interface/*)
add_custom_command(OUTPUT web_interface.zip COMMAND zip -q ${CMAKE_BINARY_DIR}/web_interface.zip ${WEB_INTERFACE_FILES} DEPENDS ${WEB_INTERFACE_FILES} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
add_custom_command(OUTPUT web_interface.o COMMAND ${CMAKE_LINKER} -r -b binary -o web_interface.o web_interface.zip DEPENDS web_interface.zip WORKING_DIRECTORY ${CMAKE_BINARY_DIR})
add_executable(scope ${SOURCE_FILES} ${PROTO_SRCS} web_interface.o)
find_library(MMAL_LIBRARY NAMES mmal PATHS /opt/vc/lib)
find_library(MMAL_CORE_LIBRARY NAMES mmal_core PATHS /opt/vc/lib)
find_library(MMAL_UTIL_LIBRARY NAMES mmal_util PATHS /opt/vc/lib)
find_library(MMAL_COMPONENTS_LIBRARY NAMES mmal_components PATHS /opt/vc/lib)
target_link_libraries(scope -ljpeg -lpthread -lPocoFoundation -lPocoNet -lPocoJSON -lPocoZip -lPocoUtil ${PROTOBUF_LIBRARIES} ${MMAL_LIBRARY} ${MMAL_CORE_LIBRARY} ${MMAL_UTIL_LIBRARY} ${MMAL_COMPONENTS_LIBRARY})
set_property(TARGET scope PROPERTY CXX_STANDARD 17)
set_property(TARGET scope PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
